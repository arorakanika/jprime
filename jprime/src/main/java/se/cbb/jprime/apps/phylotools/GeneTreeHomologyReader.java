package se.cbb.jprime.apps.phylotools;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import se.cbb.jprime.io.NewickIOException;
import se.cbb.jprime.io.NewickVertex;
import se.cbb.jprime.io.PrIMENewickTree;
import se.cbb.jprime.io.PrIMENewickTree.MetaProperty;
import se.cbb.jprime.io.PrIMENewickTreeReader;

/**
 * First script used for (i) testing that I can code in JPrIME, and (ii) reading homology
 * event in true reconciliation file generated by prime_generateTree of PrIME C++ version
 * 
 * PS. This code needs refactoring and clean-up. To be done soon.
 * 
 * @author Ikram Ullah
 */

public class GeneTreeHomologyReader{
	public static void main(String[] args)  throws IOException, NewickIOException {
		if(args.length != 1){
			System.err.println("Usage: java -classpath jprime.jar se.cbb.jprime.apps.phylotools.GeneTreeHomologyReader gene_tree_name");
		}
		System.out.println("Input Gene Tree is " + args[0]);
		File gFile = new File(args[0]);
		
		BufferedWriter writer = new BufferedWriter(new FileWriter(args[0]+".orthopairs"));
		
		PrIMENewickTree sRaw = PrIMENewickTreeReader.readTree(gFile, false, true);
		//System.out.println(sRaw.toString());		
		
		List<NewickVertex> vertices = sRaw.getVerticesAsList();
		int[] dupStatus = sRaw.getDuplicationValues();
		for (NewickVertex v : vertices) {
			int id = v.getNumber();
			if(dupStatus[id] != Integer.MAX_VALUE){
				ArrayList<NewickVertex> children = v.getChildren();
				String lchild = getLeafIds(children.get(0));
				String rchild = getLeafIds(children.get(1));
				//System.out.println("The childern ids are " + lchild + " and " + rchild);
				//System.out.println("The node number " + id + " has dupStatus = " + dupStatus[id]);
				writer.write("["+lchild+", "+rchild+"]"+"\t"+dupStatus[id]+"\n");
			}
		}
		writer.flush();
		writer.close();
		
	}
	
	public static String getLeafNames(NewickVertex vertex){
		String lNames = "(";
		lNames += getLeafNamesRecursive(vertex);
		return lNames + ")";
	}

	private static String getLeafNamesRecursive(NewickVertex vertex) {
		// TODO Auto-generated method stub
		if(vertex.isLeaf())
			return vertex.getName();
		else {
			ArrayList<NewickVertex> ch = vertex.getChildren();
			return getLeafNamesRecursive(ch.get(0)) + "," + getLeafNamesRecursive(ch.get(1));
		}
	}
	
	public static String getLeafIds(NewickVertex vertex){
		String lNames = "";
		lNames += getLeafIdsRecursive(vertex);
		return lNames + "";
	}

	private static String getLeafIdsRecursive(NewickVertex vertex) {
		// TODO Auto-generated method stub
		if(vertex.isLeaf())
			return vertex.getNumber()+"";
		else {
			ArrayList<NewickVertex> ch = vertex.getChildren();
			return getLeafIdsRecursive(ch.get(0)) + " " + getLeafIdsRecursive(ch.get(1));
		}
	}
}
